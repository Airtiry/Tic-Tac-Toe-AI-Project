import tkinter as tk
from tkinter import messagebox, font, colorchooser

class TicTacToe:
    def __init__(self, root):
        self.root = root
        self.root.title("Tic-Tac-Toe")

        # Default customization settings
        self.font_style = ("Helvetica", 20)  # Default font
        self.bg_color = "#F0F0F0"            # Default background color
        self.button_color = "#FFFFFF"        # Default button color
        self.root.configure(bg=self.bg_color)
        
        # Initialize variables
        self.board = [" " for _ in range(9)]  # 3x3 board (9 cells)
        self.current_player = "X"  # Start with player "X"
        self.game_running = True
        
        # Create a label to show which player's turn it is
        self.turn_label = tk.Label(self.root, text=f"Player {self.current_player}'s Turn", 
                                   font=("Helvetica", 15), bg=self.bg_color)
        self.turn_label.grid(row=0, column=0, columnspan=3, pady=10)

        # Create buttons for the grid
        self.buttons = []
        for i in range(9):
            button = tk.Button(self.root, text=" ", font=self.font_style, width=5, height=2, 
                               bg=self.button_color, command=lambda i=i: self.handle_click(i))
            button.grid(row=(i//3) + 1, column=i%3, sticky="nsew", padx=5, pady=5)
            self.buttons.append(button)

        # Configure grid scaling to ensure buttons resize with window
        for i in range(3):
            self.root.grid_rowconfigure(i+1, weight=1)
            self.root.grid_columnconfigure(i, weight=1)

        # Create a reset button
        self.reset_button = tk.Button(self.root, text="Reset", font=("Helvetica", 15), bg=self.bg_color,
                                      command=self.reset_game)
        self.reset_button.grid(row=4, column=0, columnspan=3, pady=10)

        # Add Settings button to open customization window
        self.settings_button = tk.Button(self.root, text="Settings", font=("Helvetica", 15), bg=self.bg_color,
                                         command=self.open_settings)
        self.settings_button.grid(row=5, column=0, columnspan=3, pady=10)

    def handle_click(self, index):
        if self.game_running and self.board[index] == " ":
            self.board[index] = self.current_player
            self.buttons[index].config(text=self.current_player)
            if self.check_winner():
                messagebox.showinfo("Game Over", f"Player {self.current_player} wins!")
                self.game_running = False
            elif " " not in self.board:
                messagebox.showinfo("Game Over", "It's a draw!")
                self.game_running = False
            else:
                self.current_player = "O" if self.current_player == "X" else "X"
                self.turn_label.config(text=f"Player {self.current_player}'s Turn")

    def check_winner(self):
        winning_combinations = [
            (0, 1, 2), (3, 4, 5), (6, 7, 8),  
            (0, 3, 6), (1, 4, 7), (2, 5, 8),  
            (0, 4, 8), (2, 4, 6)              
        ]
        for combo in winning_combinations:
            if self.board[combo[0]] == self.board[combo[1]] == self.board[combo[2]] != " ":
                return True
        return False

    def reset_game(self):
        self.board = [" " for _ in range(9)]
        self.current_player = "X"
        self.game_running = True
        for button in self.buttons:
            button.config(text=" ", bg=self.button_color)
        self.turn_label.config(text=f"Player {self.current_player}'s Turn")

    def open_settings(self):
        settings_window = tk.Toplevel(self.root)
        settings_window.title("Game Settings")
        settings_window.geometry("300x400")
        settings_window.configure(bg=self.bg_color)

        # Font style settings
        tk.Label(settings_window, text="Font Style:", bg=self.bg_color).pack(pady=5)
        font_var = tk.StringVar(value="Helvetica")
        font_menu = tk.OptionMenu(settings_window, font_var, "Helvetica", "Arial", "Times New Roman")
        font_menu.pack()

        # Font size settings
        tk.Label(settings_window, text="Font Size:", bg=self.bg_color).pack(pady=5)
        font_size_var = tk.IntVar(value=20)
        tk.Spinbox(settings_window, from_=10, to=50, textvariable=font_size_var).pack()

        # Button color settings
        tk.Label(settings_window, text="Button Color:", bg=self.bg_color).pack(pady=5)
        button_color_button = tk.Button(settings_window, text="Pick Button Color", command=lambda: self.change_color("button"))
        button_color_button.pack()

        # Background color settings
        tk.Label(settings_window, text="Background Color:", bg=self.bg_color).pack(pady=5)
        background_color_button = tk.Button(settings_window, text="Pick Background Color", command=lambda: self.change_color("background"))
        background_color_button.pack()

        # Apply settings button
        tk.Button(settings_window, text="Apply", command=lambda: self.apply_settings(font_var.get(), font_size_var.get())).pack(pady=20)

    def change_color(self, target):
        chosen_color = colorchooser.askcolor()[1]  # Get color from color chooser
        if chosen_color:
            if target == "button":
                self.button_color = chosen_color
                for button in self.buttons:
                    button.config(bg=self.button_color)
            elif target == "background":
                self.bg_color = chosen_color
                self.root.configure(bg=self.bg_color)
                self.turn_label.config(bg=self.bg_color)
                self.reset_button.config(bg=self.bg_color)
                self.settings_button.config(bg=self.bg_color)

    def apply_settings(self, font_name, font_size):
        self.font_style = (font_name, font_size)
        for button in self.buttons:
            button.config(font=self.font_style)

# Run the application
if __name__ == "__main__":
    root = tk.Tk()
    root.geometry("400x450")
    game = TicTacToe(root)
    root.mainloop()
